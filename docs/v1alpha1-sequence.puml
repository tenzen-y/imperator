@startuml
'https://plantuml.com/sequence-diagram

participant "End User" as User order 1
participant "K8s API\n Server" as APIServer order 2
participant "Imperator Machine\n webhook" as MachineWebhook order 3
participant "Imperator Machine\n controller" as MachineController order 4
participant "Imperator MachineNodePool\n controller" as MachineNodePoolController order 5
participant "Mutating Pod\nWebhook" as PodWebhook order 6

User -> APIServer: Create Machine CR
activate User
activate APIServer

APIServer --> MachineWebhook: New CR
activate MachineWebhook

MachineWebhook --> APIServer: webhook result
deactivate MachineWebhook

APIServer -> User: result
deactivate User

APIServer --> MachineController: New Machine CR
activate MachineController

MachineController --> APIServer: Create MachineNodePool CR, StatefulSet

loop
  MachineController -> APIServer: Watch Pod containing `imperator.io/node=MACHINE_CR_NAME` label
  opt Pod containing `imperator.io/node=MACHINE_CR_NAME` label run CUD, not CRUD.
    MachineController -> APIServer: Scale up or down `imperator.io/node=MACHINE_CR_NAME` StatefulSet
  end
  deactivate MachineController
end

APIServer --> MachineNodePoolController: New MachineNodePool CR
activate MachineNodePoolController

MachineNodePoolController --> APIServer: set `imperator.io/node=MACHINE_CR_NAME` to node

loop
  MachineNodePoolController -> APIServer: Watch Node determined in MachineNodePool resource.
  opt Node status change or Machine controller change MachineNodePool resource.
    MachineNodePoolController -> APIServer: Scale up or down `imperator.io/node=MACHINE_CR_NAME` StatefulSet
  end
  deactivate MachineNodePoolController
end

User -> APIServer: Create ML Pod
activate User

APIServer --> PodWebhook: New Pod
activate PodWebhook
PodWebhook ---> APIServer: Victim Dummy Pod & Create ML Pod
deactivate PodWebhook
APIServer -> User: result
deactivate User

deactivate APIServer

@enduml
